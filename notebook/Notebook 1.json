{
	"name": "Notebook 1",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkPool001v10",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "503e75cf-8da0-40df-b75f-9f724aedf43e"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/924cf5c7-5f72-42ba-98ee-7ea905016982/resourceGroups/trainingresourcegroupv2/providers/Microsoft.Synapse/workspaces/synapseworkspacev10/bigDataPools/SparkPool001v10",
				"name": "SparkPool001v10",
				"type": "Spark",
				"endpoint": "https://synapseworkspacev10.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool001v10",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import pandas as pd\r\n",
					"from sklearn.datasets import fetch_california_housing"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# load the  dataset\r\n",
					"\r\n",
					"california_housing = fetch_california_housing()\r\n",
					"pd_df_california_housing = pd.DataFrame(california_housing.data, columns = california_housing.feature_names)\r\n",
					"pd_df_california_housing['target'] = pd.Series(california_housing.target)"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pd_df_california_housing_inferencing = pd_df_california_housing.sample(frac=0.01)\r\n",
					"pd_df_california_housing_training = pd_df_california_housing.drop(pd_df_california_housing_inferencing.index)"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pd_df_california_housing_inferencing['target'] = 0.0"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark_df_california_housing_inferencing = spark.createDataFrame(pd_df_california_housing_inferencing)\r\n",
					"spark_df_california_housing_training = spark.createDataFrame(pd_df_california_housing_training)\r\n",
					"\r\n",
					"spark_df_california_housing_inferencing.createOrReplaceTempView(\"CaliforniaInference\")\r\n",
					"\r\n",
					"spark_df_california_housing_training.write.mode(\"overwrite\").saveAsTable(\"default.CaliforniaTrain\")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "scala"
					}
				},
				"source": [
					"%%spark\r\n",
					"\r\n",
					"val scala_df_train = spark.sqlContext.sql (\"select * from CaliforniaTrain\")\r\n",
					"scala_df_train.write.synapsesql(\"SQLPoolv10.dbo.CaliforniaTrain\", Constants.INTERNAL)\r\n",
					"\r\n",
					"val scala_df_inference = spark.sqlContext.sql (\"select * from CaliforniaInference\")\r\n",
					"scala_df_inference.write.synapsesql(\"SQLPoolv10.dbo.CaliforniaInference\", Constants.INTERNAL)"
				],
				"execution_count": 6
			}
		]
	}
}