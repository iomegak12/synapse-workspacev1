{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "synapseworkspacev10"
		},
		"synapseworkspacev10-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synapseworkspacev10-WorkspaceDefaultSqlServer'"
		},
		"AzureMLService1_properties_typeProperties_subscriptionId": {
			"type": "string",
			"defaultValue": "924cf5c7-5f72-42ba-98ee-7ea905016982"
		},
		"AzureMLService1_properties_typeProperties_resourceGroupName": {
			"type": "string",
			"defaultValue": "trainingresourcegroupv2"
		},
		"synapseworkspacev10-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapsedlsv10.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/AzureMLService1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureMLService",
				"typeProperties": {
					"subscriptionId": "[parameters('AzureMLService1_properties_typeProperties_subscriptionId')]",
					"resourceGroupName": "[parameters('AzureMLService1_properties_typeProperties_resourceGroupName')]",
					"mlWorkspaceName": "trainingmlwsv10",
					"authentication": "MSI"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapseworkspacev10-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synapseworkspacev10-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapseworkspacev10-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('synapseworkspacev10-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool001v10",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "a2588080-e1ef-47a5-9e32-0cb65fd23289"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/924cf5c7-5f72-42ba-98ee-7ea905016982/resourceGroups/trainingresourcegroupv2/providers/Microsoft.Synapse/workspaces/synapseworkspacev10/bigDataPools/SparkPool001v10",
						"name": "SparkPool001v10",
						"type": "Spark",
						"endpoint": "https://synapseworkspacev10.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool001v10",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"import pandas as pd\r\n",
							"from sklearn.datasets import fetch_california_housing"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# load the  dataset\r\n",
							"\r\n",
							"california_housing = fetch_california_housing()\r\n",
							"pd_df_california_housing = pd.DataFrame(california_housing.data, columns = california_housing.feature_names)\r\n",
							"pd_df_california_housing['target'] = pd.Series(california_housing.target)"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"pd_df_california_housing_inferencing = pd_df_california_housing.sample(frac=0.01)\r\n",
							"pd_df_california_housing_training = pd_df_california_housing.drop(pd_df_california_housing_inferencing.index)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"pd_df_california_housing_inferencing['target'] = 0.0"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"spark_df_california_housing_inferencing = spark.createDataFrame(pd_df_california_housing_inferencing)\r\n",
							"spark_df_california_housing_training = spark.createDataFrame(pd_df_california_housing_training)\r\n",
							"\r\n",
							"spark_df_california_housing_inferencing.createOrReplaceTempView(\"CaliforniaInference\")\r\n",
							"\r\n",
							"spark_df_california_housing_training.write.mode(\"overwrite\").saveAsTable(\"default.CaliforniaTrain\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "scala"
							}
						},
						"source": [
							"%%spark\r\n",
							"\r\n",
							"val scala_df_train = spark.sqlContext.sql (\"select * from CaliforniaTrain\")\r\n",
							"scala_df_train.write.synapsesql(\"SQLPoolv10.dbo.CaliforniaTrain\", Constants.INTERNAL)\r\n",
							"\r\n",
							"val scala_df_inference = spark.sqlContext.sql (\"select * from CaliforniaInference\")\r\n",
							"scala_df_inference.write.synapsesql(\"SQLPoolv10.dbo.CaliforniaInference\", Constants.INTERNAL)"
						],
						"outputs": [],
						"execution_count": 6
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SparkPool001v10')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 3,
					"minNodeCount": 3
				},
				"nodeCount": 0,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.1",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": true,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQLPoolv10')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SparkPool2v20')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 2')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool001v10",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "1",
						"spark.autotune.trackingId": "eb7f6743-09a1-4637-8c62-7e240cc6daf9"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/924cf5c7-5f72-42ba-98ee-7ea905016982/resourceGroups/trainingresourcegroupv2/providers/Microsoft.Synapse/workspaces/synapseworkspacev10/bigDataPools/SparkPool001v10",
						"name": "SparkPool001v10",
						"type": "Spark",
						"endpoint": "https://synapseworkspacev10.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool001v10",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"import numpy as np\r\n",
							"import pandas as pd\r\n",
							"\r\n",
							"# load the boston data set\r\n",
							"from sklearn.datasets import load_boston\r\n",
							"boston = load_boston()\r\n",
							"\r\n",
							"# convert to a Pandas Data Frame\r\n",
							"boston_pd = pd.DataFrame(data= np.c_[boston['data'],boston['target']], columns= np.append(boston['feature_names'], 'target')).sample(frac=1)\r\n",
							"print(boston_pd.shape)\r\n",
							"boston_pd.head(5)"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from sklearn.linear_model import LinearRegression\r\n",
							"from scipy.stats.stats import pearsonr\r\n",
							"\r\n",
							"# split into data and label arrays \r\n",
							"y = boston_pd['target']\r\n",
							"X = boston_pd.drop(['target'], axis=1)\r\n",
							"\r\n",
							"# create training (~80%) and test data sets\r\n",
							"X_train = X[:400]\r\n",
							"X_test = X[400:]\r\n",
							"y_train = y[:400]\r\n",
							"y_test = y[400:]\r\n",
							"\r\n",
							"# train a classifier \r\n",
							"lr = LinearRegression()\r\n",
							"model = lr.fit(X_train, y_train)\r\n",
							"\r\n",
							"# make predictions\r\n",
							"y_pred = model.predict(X_test)\r\n",
							"\r\n",
							"# error metrics\r\n",
							"r = pearsonr(y_pred, y_test)\r\n",
							"mae = sum(abs(y_pred - y_test))/len(y_test)\r\n",
							"print(\"R-sqaured: \" + str(r[0]**2))\r\n",
							"print(\"MAE: \" + str(mae))"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"boston_sp = spark.createDataFrame(boston_pd)\r\n",
							"display(boston_sp)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from pyspark.ml.feature import VectorAssembler\r\n",
							"\r\n",
							"# split into training and test spark data frames\r\n",
							"boston_train = spark.createDataFrame(boston_pd[:400])\r\n",
							"boston_test = spark.createDataFrame(boston_pd[400:])\r\n",
							"\r\n",
							"# convert to vector representation for MLlib\r\n",
							"assembler = VectorAssembler(inputCols= boston_train.schema.names[:(boston_pd.shape[1] - 1)],  outputCol=\"features\" )\r\n",
							"boston_train = assembler.transform(boston_train).select('features', 'target') \r\n",
							"boston_test = assembler.transform(boston_test).select('features', 'target') \r\n",
							"\r\n",
							"display(boston_train)"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# linear regresion with Spark\r\n",
							"from pyspark.ml.regression import LinearRegression\r\n",
							"\r\n",
							"# linear regression \r\n",
							"lr = LinearRegression(maxIter=10, regParam=0.1, elasticNetParam=0.5, labelCol=\"target\")\r\n",
							"\r\n",
							"# Fit the model\r\n",
							"model = lr.fit(boston_train)\r\n",
							"boston_pred = model.transform(boston_test)\r\n",
							"\r\n",
							"# calculate results \r\n",
							"r = boston_pred.stat.corr(\"prediction\", \"target\")\r\n",
							"print(\"R-sqaured: \" + str(r**2))"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.ml.tuning import CrossValidator, ParamGridBuilder\r\n",
							"from pyspark.ml.evaluation import RegressionEvaluator\r\n",
							"\r\n",
							"crossval = CrossValidator(estimator=LinearRegression(labelCol = \"target\"),  \r\n",
							"                           estimatorParamMaps=ParamGridBuilder().addGrid(LinearRegression.elasticNetParam, [0, 0.5, 1.0]).build(),\r\n",
							"                           evaluator=RegressionEvaluator(labelCol = \"target\", metricName = \"r2\"),\r\n",
							"                           numFolds=10)\r\n",
							"\r\n",
							"# cross validate the model and select the best fit\r\n",
							"cvModel = crossval.fit(boston_train) \r\n",
							"model = cvModel.bestModel\r\n",
							"\r\n",
							"# calculate results \r\n",
							"boston_pred = model.transform(boston_test)\r\n",
							"r = boston_pred.stat.corr(\"prediction\", \"target\")\r\n",
							"print(\"R-sqaured: \" + str(r**2))"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sklearn version \r\n",
							"from sklearn.ensemble import RandomForestRegressor as RFR\r\n",
							"from multiprocessing.pool import ThreadPool\r\n",
							"\r\n",
							"# allow up to 5 concurrent threads\r\n",
							"pool = ThreadPool(5)\r\n",
							"\r\n",
							"# hyperparameters to test out (n_trees)\r\n",
							"parameters = [ 10, 20, 50]\r\n",
							"\r\n",
							"# define a function to train a RF model and return metrics \r\n",
							"def sklearn_random_forest(trees, X_train, X_test, y_train, y_test):\r\n",
							"\r\n",
							"    # train a random forest regressor with the specified number of trees\r\n",
							"    rf= RFR(n_estimators = trees)\r\n",
							"    model = rf.fit(X_train, y_train)\r\n",
							"\r\n",
							"    # make predictions\r\n",
							"    y_pred = model.predict(X_test)\r\n",
							"    r = pearsonr(y_pred, y_test)\r\n",
							"\r\n",
							"    # return the number of trees, and the R value \r\n",
							"    return [trees, r[0]**2]  "
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"pool.map(lambda trees: sklearn_random_forest(trees, X_train, X_test, y_train, y_test), parameters)"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# spark version\r\n",
							"from pyspark.ml.regression import RandomForestRegressor\r\n",
							"\r\n",
							"# define a function to train a RF model and return metrics \r\n",
							"def mllib_random_forest(trees, boston_train, boston_test):\r\n",
							"\r\n",
							"    # train a random forest regressor with the specified number of trees\r\n",
							"    rf = RandomForestRegressor(numTrees = trees, labelCol=\"target\")\r\n",
							"    model = rf.fit(boston_train)\r\n",
							"\r\n",
							"    # make predictions\r\n",
							"    boston_pred = model.transform(boston_test)\r\n",
							"    r = boston_pred.stat.corr(\"prediction\", \"target\")\r\n",
							"\r\n",
							"    # return the number of trees, and the R value \r\n",
							"    return [trees, r**2]\r\n",
							"  \r\n",
							"# run the tasks \r\n",
							"pool.map(lambda trees: mllib_random_forest(trees, boston_train, boston_test), parameters)"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import pandas_udf, PandasUDFType\r\n",
							"from pyspark.sql.types import *\r\n",
							"\r\n",
							"# setup the spark data frame as a table\r\n",
							"boston_sp.createOrReplaceTempView(\"boston\")\r\n",
							"\r\n",
							"# add train/test label and expand the data set by 3x (each num trees parameter)\r\n",
							"full_df = spark.sql(\"\"\"\r\n",
							"  select *\r\n",
							"  from (\r\n",
							"    select *, case when rand() < 0.8 then 1 else 0 end as training \r\n",
							"    from boston\r\n",
							"  ) b\r\n",
							"  cross join (\r\n",
							"      select 11 as trees union all select 20 as trees union all select 50 as trees)\r\n",
							"\"\"\")\r\n",
							"\r\n",
							"schema = StructType([StructField('trees', LongType(), True),\r\n",
							"                     StructField('r_squared', DoubleType(), True)])  \r\n",
							"\r\n",
							"@pandas_udf(schema, PandasUDFType.GROUPED_MAP)\r\n",
							"def train_RF(boston_pd):\r\n",
							"    trees = boston_pd['trees'].unique()[0]\r\n",
							"\r\n",
							"    # get the train and test groups \r\n",
							"    boston_train = boston_pd[boston_pd['training'] == 1]\r\n",
							"    boston_test = boston_pd[boston_pd['training'] == 0] \r\n",
							"        \r\n",
							"    # create data and label groups \r\n",
							"    y_train = boston_train['target']\r\n",
							"    X_train = boston_train.drop(['target'], axis=1)\r\n",
							"    y_test = boston_test['target']\r\n",
							"    X_test = boston_test.drop(['target'], axis=1)\r\n",
							"   \r\n",
							"    # train a classifier \r\n",
							"    rf= RFR(n_estimators = trees)\r\n",
							"    model = rf.fit(X_train, y_train)\r\n",
							"\r\n",
							"    # make predictions\r\n",
							"    y_pred = model.predict(X_test)\r\n",
							"    r = pearsonr(y_pred, y_test)\r\n",
							"    \r\n",
							"    # return the number of trees, and the R value \r\n",
							"    return pd.DataFrame({'trees': trees, 'r_squared': (r[0]**2)}, index=[0])\r\n",
							"  \r\n",
							"# use the Pandas UDF\r\n",
							"results = full_df.groupby('trees').apply(train_RF)\r\n",
							"\r\n",
							"# print the results \r\n",
							"print(results.take(3))\r\n",
							""
						],
						"outputs": [],
						"execution_count": 10
					}
				]
			},
			"dependsOn": []
		}
	]
}